{
  "$schema": "http://json.schemastore.org/template",
  "author": "VMware",
  "classifications": [
    "Web",
    "WebAPI",
    "Steeltoe"
  ],
  "identity": "steeltoe.webapi.csharp",
  "name": "Steeltoe Web API",
  "shortName": "steeltoe-webapi",
  "tags": {
    "type": "project",
    "language": "C#"
  },
  "sourceName": "Company.WebApplication1",
  "sources": [
    {
      "modifiers": [
        {
          "exclude": [
            "Directory.Build.props",
            ".idea/**",
            ".vscode/**"
          ]
        },
        {
          "condition": "(!HystrixOption)",
          "exclude": [
            "HelloHystrixCommand.cs"
          ]
        },
        {
          "condition": "(!DockerOption)",
          "exclude": [
            "Dockerfile"
          ]
        },
        {
          "condition": "(!AnyEfCore)",
          "exclude": [
            "Models/ErrorViewModel.cs",
            "Models/SampleContext.cs"
          ]
        }
      ]
    }
  ],
  "symbols": {
    "AnyCloudManagement": {
      "type": "computed",
      "value": "AzureSpringCloudHostingOption || CloudFoundryHostingOption || DynamicLoggerOption || EurekaOption || HystrixOption || ManagementEndpointsOption"
    },
    "AnyConfigurator": {
      "type": "computed",
      "value": "CloudConfigOption || PlaceholderOption || RandomValueOption"
    },
    "AnyConnector": {
      "type": "computed",
      "value": "MongoDbOption || MySqlEfCoreOption || MySqlOption || OAuthOption || PostgreSqlEfCoreOption || PostgreSqlOption || RedisOption || RabbitMqOption || SqlServerOption"
    },
    "AnyEfCore": {
      "type": "computed",
      "value": "MySqlEfCoreOption || PostgreSqlEfCoreOption"
    },
    "AnySqlDatabase": {
      "type": "computed",
      "value": "MySqlOption || PostgreSqlOption || SqlServerOption"
    },
    "AnySteeltoeLibrary": {
      "type": "computed",
      "value": "AnyCloudManagement || AnyConfigurator || AnyConnector"
    },
    "AzureOAuthVersion": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$(AzureOAuthVersion)",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(Framework == 'netcoreapp2.1')",
            "value": "2.1.*"
          },
          {
            "condition": "(Framework == 'netcoreapp3.1')",
            "value": "3.1.*"
          },
          {
            "condition": "(Framework == 'net5.0')",
            "value": "3.1.*"
          }
        ]
      }
    },
    "AzureSpringCloudHostingOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add hosting support for Microsoft Azure Spring Cloud.",
      "defaultValue": "false"
    },
    "CloudConfigOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add client support for Spring Cloud Config.",
      "defaultValue": "false"
    },
    "CloudFoundryHostingOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add hosting support for Cloud Foundry.",
      "defaultValue": "false"
    },
    "DockerImageTag": {
      "type": "generated",
      "generator": "switch",
      "replaces": "5.0-alpine",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(Framework == 'net5.0')",
            "value": "5.0-alpine"
          },
          {
            "condition": "(Framework == 'netcoreapp3.1')",
            "value": "3.1-alpine"
          },
          {
            "condition": "(Framework == 'netcoreapp2.1')",
            "value": "2.1-alpine"
          }
        ]
      }
    },
    "DockerOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add support for Docker.",
      "defaultValue": "false"
    },
    "DynamicLoggerOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add a dynamic logger.",
      "defaultValue": "false"
    },
    "EntityFrameworkCoreVersion": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "3.1.*"
      },
      "replaces": "$(EntityFrameworkCoreVersion)"
    },
    "EurekaOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to Eureka, a REST-based service for locating services.",
      "defaultValue": "false"
    },
    "Framework": {
      "description": "Set the target framework for the project.",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "net5.0"
        },
        {
          "choice": "netcoreapp3.1"
        },
        {
          "choice": "netcoreapp2.1"
        }
      ],
      "defaultValue": "net5.0",
      "replaces": "$(FrameworkOption)"
    },
    "FrameworkNet50": {
      "type": "generated",
      "generator": "regexMatch",
      "datatype": "bool",
      "parameters": {
        "source": "Framework",
        "pattern": "^net5.0$"
      }
    },
    "FrameworkNetCoreApp31": {
      "type": "generated",
      "generator": "regexMatch",
      "datatype": "bool",
      "parameters": {
        "source": "Framework",
        "pattern": "^netcoreapp3.1$"
      }
    },
    "FrameworkNetCoreApp21": {
      "type": "generated",
      "generator": "regexMatch",
      "datatype": "bool",
      "parameters": {
        "source": "Framework",
        "pattern": "^netcoreapp2.1$"
      }
    },
    "HystrixOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add support for Netflix Hystrix, a latency and fault tolerance library.",
      "defaultValue": "false"
    },
    "ManagementEndpointsOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add application management endpoints, such as health and metrics.",
      "defaultValue": "false"
    },
    "MongoDbDriverVersion": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "2.8.*"
      },
      "replaces": "$(MongoDbDriverVersion)"
    },
    "MongoDbOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to MongoDB databases.",
      "defaultValue": "false"
    },
    "MySqlDriverVersion": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "8.0.*"
      },
      "replaces": "$(MySqlDriverVersion)"
    },
    "MySqlEfCoreOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to MySQL databases using Entity Framework Core.",
      "defaultValue": "false"
    },
    "MySqlOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to MySQL databases.",
      "defaultValue": "false"
    },
    "NpgsqlDriverVersion": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "4.1.*"
      },
      "replaces": "$(NpgsqlDriverVersion)"
    },
    "OAuthOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to OAuth security.",
      "defaultValue": "false"
    },
    "PlaceholderOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add a placeholder configuration source.",
      "defaultValue": "false"
    },
    "PostgreSqlEfCoreOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to PostgreSQL databases using Entity Framework Core.",
      "defaultValue": "false"
    },
    "PostgreSqlOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to PostgreSQL databases.",
      "defaultValue": "false"
    },
    "RabbitMqDriverVersion": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "5.1.*"
      },
      "replaces": "$(RabbitMqDriverVersion)"
    },
    "RabbitMqOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to RabbitMQ message brokers.",
      "defaultValue": "false"
    },
    "RandomValueOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add a random value configuration source.",
      "defaultValue": "false"
    },
    "RedisDriverVersion": {
      "type": "generated",
      "generator": "constant",
      "parameters": {
        "value": "3.1.*"
      },
      "replaces": "$(RedisDriverVersion)"
    },
    "RedisOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to Redis data stores.",
      "defaultValue": "false"
    },
    "SkipRestoreOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Skip the automatic restore of the project on create.",
      "defaultValue": "false"
    },
    "SqlServerOption": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add access to Microsoft SQL Server databases.",
      "defaultValue": "false"
    },
    "Steeltoe2": {
      "type": "generated",
      "generator": "regexMatch",
      "datatype": "bool",
      "parameters": {
        "source": "SteeltoeVersionOption",
        "pattern": "^2.*"
      }
    },
    "Steeltoe2Connector": {
      "type": "computed",
      "value": "Steeltoe2 && AnyConnector"
    },
    "Steeltoe2ManagementEndpoints": {
      "type": "computed",
      "value": "Steeltoe2 && ManagementEndpointsOption"
    },
    "Steeltoe3": {
      "type": "generated",
      "generator": "regexMatch",
      "datatype": "bool",
      "parameters": {
        "source": "SteeltoeVersionOption",
        "pattern": "^3.*"
      }
    },
    "Steeltoe3Connector": {
      "type": "computed",
      "value": "Steeltoe3 && AnyConnector"
    },
    "Steeltoe3ManagementEndpoints": {
      "type": "computed",
      "value": "Steeltoe3 && ManagementEndpointsOption"
    },
    "SteeltoeVersionOption": {
      "description": "Set the Steeltoe version for the project.",
      "type": "parameter",
      "datatype": "string",
      "defaultValue": "3.0.*",
      "replaces": "$(SteeltoeVersionOption)"
    }
  },
  "primaryOutputs": [
    {
      "path": "Company.WebApplication1.csproj"
    }
  ],
  "postActions": [
    {
      "description": "Restore NuGet packages required by this project.",
      "condition": "!SkipRestoreOption",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true
    }
  ]
}
